import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';
import { supabase } from '@/integrations/supabase/client';

export const useAgentRegistration = () => {
  const navigate = useNavigate();
  const [fullName, setFullName] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [nationalId, setNationalId] = useState('');
  const [location, setLocation] = useState('');
  const [profilePicture, setProfilePicture] = useState<File | null>(null);
  const [profilePreview, setProfilePreview] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [userId, setUserId] = useState<string | null>(null);

  // Try to get userId from session first, then from auth check
  useEffect(() => {
    const initializeUserId = async () => {
      // First try to get from session storage
      const storedUserId = sessionStorage.getItem('userId');
      if (storedUserId) {
        setUserId(storedUserId);
        return;
      }

      // If no stored userId, check if user is authenticated
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('Auth session error:', error);
        toast.error('Authentication error');
        navigate('/signin');
        return;
      }

      if (session?.user) {
        const userId = session.user.id;
        setUserId(userId);
        
        // Check if agent record exists
        const { data: agent, error: agentError } = await supabase
          .from('agents')
          .select('id, full_name')
          .eq('id', userId)
          .maybeSingle();
          
        if (agentError) {
          console.error('Error checking agent record:', agentError);
          toast.error('Error checking agent status');
          return;
        }
        
        // If agent exists and has a full name, they've completed registration
        if (agent?.full_name) {
          toast.error('Agent profile already exists');
          navigate('/dashboard');
          return;
        }
      } else {
        // If not authenticated, redirect to sign in
        toast.error('Authentication required');
        navigate('/signin');
      }
    };

    initializeUserId();
  }, [navigate]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setProfilePicture(file);
      
      // Create a preview
      const reader = new FileReader();
      reader.onloadend = () => {
        setProfilePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!fullName || !phoneNumber || !nationalId || !location || !profilePicture || !userId) {
      toast.error('Please fill in all fields');
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Check if agent already exists for this user
      const { data: existingAgent } = await supabase
        .from('agents')
        .select('id')
        .eq('id', userId)
        .maybeSingle();
        
      if (existingAgent) {
        toast.error('Agent profile already exists for this account');
        navigate('/dashboard');
        return;
      }
      
      // Upload profile picture
      const fileExt = profilePicture.name.split('.').pop();
      const filePath = `${userId}/${Date.now()}.${fileExt}`;
      
      const { error: uploadError } = await supabase.storage
        .from('agent_profiles')
        .upload(filePath, profilePicture);
        
      if (uploadError) {
        throw uploadError;
      }
      
      // Get public URL for the uploaded image
      const { data: urlData } = supabase.storage
        .from('agent_profiles')
        .getPublicUrl(filePath);
        
      // Insert agent data - agent_code will be auto-generated by database trigger
      const { error: insertError } = await supabase
        .from('agents')
        .insert({
          id: userId,
          full_name: fullName,
          phone_number: phoneNumber,
          national_id: nationalId,
          location: location,
          profile_picture: urlData.publicUrl,
          agent_code: '', // This will be overwritten by the trigger
        });
        
      if (insertError) {
        throw insertError;
      }
      
      // After successful registration, remove userId from session storage
      sessionStorage.removeItem('userId');
      
      toast.success('Registration successful');
      navigate('/dashboard');
    } catch (error: any) {
      console.error('Error registering agent:', error);
      toast.error(error.message || 'An error occurred during registration');
    } finally {
      setIsLoading(false);
    }
  };

  return {
    fullName,
    setFullName,
    phoneNumber,
    setPhoneNumber,
    nationalId,
    setNationalId,
    location,
    setLocation,
    profilePicture,
    profilePreview,
    isLoading,
    userId,
    setUserId,
    handleFileChange,
    handleSubmit
  };
};
